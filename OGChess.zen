class Piece

    @Property
    var row
    
    @Property
    var column
    
    @Property
    var type
    
    @Property
    var captured
    
    @Property
    var color
    
    function new(row, column, type, captured, color)
        this.row = row
        this.column = column
        this.type = type
        this.captured = captured
        this.color = color

class Tile
    
    @Property
    var white
    
    @Property
    var row
    
    @Property
    var column
    
    @Property
    var piece
    
    function new(row, column)
        this.white = (COLOR_MAP & (1 << (row * column + column))) != 0
        this.row = row
        this.column = column

/**	
 * 	 8  r n b q k b n r 
 *	 7  p p p p p p p p 
 *	 6  . . . . . . . . 
 *	 5  . . . . . . . . 
 *	 4  . . . . . . . . 
 *	 3  . . . . . . . . 
 *	 2  P P P P P P P P 
 *	 1  R N B Q K B N R
 *    	
 *    	a b c d e f g h
 *    
 * P -> Pawn
 * K -> King
 * Q -> Queen
 * R -> Rook
 * N -> Knight
 * B -> Bishop
 *
 * Upper case represents white pieces, and lower case represents black pieces.
 */
class Board

    @Property
    var tiles

    function new()
        tiles = array(Tile, Tile.new, 8, 8)
        
        tiles[0][0].piece = new Rook(true)
        tiles[0][1].piece = new Knight(true)
        tiles[0][2].piece = new Bishop(true)
        tiles[0][3].piece = new Queen(true)
        tiles[0][4].piece = new King(true)
        tiles[0][5].piece = new Bishop(true)
        tiles[0][6].piece = new Knight(true)
        tiles[0][7].piece = new Rook(true)
        for var i in range(0, 8)
            tiles[1][i].piece = new Pawn(true)
        
        tiles[7][0].piece = new Rook(false)
        tiles[7][1].piece = new Knight(false)
        tiles[7][2].piece = new Bishop(false)
        tiles[7][3].piece = new Queen(false)
        tiles[7][4].piece = new King(false)
        tiles[7][5].piece = new Bishop(false)
        tiles[7][6].piece = new Knight(false)
        tiles[7][7].piece = new Rook(false)
        for var i in range(0, 8)
            tiles[7][i].piece = new Pawn(false)
        
        

class ConsoleChess

    var engine

    function new(configuration)
        engine = new ChessEngine(configuration)

    function turn()
        var valid = false
        while !valid
            var player = engine.currentPlayer
            var move = prompt(player.name + ' [' + player.color + ']: ')
            valid = engine.move(move)

            if !valid
                print('[error] The specified move is invalid.')

    function start()
        while !engine.complete
            turn()
            turn()
            print(engine.board)

function main(...arguments)
    var player1Name = prompt('[Player 1] Name: ')
    var player2Name = prompt('[Player 2] Name: ')
    var configuration = {
        'player1': {
            'name' : player1Name
        },
        'player2': {
            'name' : player2Name
        }
    }

    var chess = new ConsoleChess(configuration)
    chess.start()
